package com.mw.test.core.controller;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.WebApplicationContext;

import com.mw.core.domain.DataDic;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:applicationContext.xml" })
// defaultRollback 默认回滚事物(默认为false)
// @TransactionConfiguration(transactionManager = "transactionManager")
// @Transactional
@WebAppConfiguration
public class DataDicControllerTest {
	@Autowired
	private WebApplicationContext wac;

	private MockMvc mockMvc;

	@Before
	public void setup() {
		// webAppContextSetup 注意上面的static import
		// webAppContextSetup 构造的WEB容器可以添加fileter 但是不能添加listenCLASS
		// WebApplicationContext context =
		// ContextLoader.getCurrentWebApplicationContext();
		// 如果控制器包含如上方法 则会报空指针
		this.mockMvc = webAppContextSetup(this.wac).build();
	}

	@Test
	public void testSaveDataDic() throws Exception {
		mockMvc.perform(post("/sys/dd/save").contentType(MediaType.APPLICATION_FORM_URLENCODED)
				//.requestAttr("dataDic", dataDic)/*requestAttr无法传递对象*/
				.param("keyVal", "DD01")
				.param("pid","0")
				.param("type", "DD")
				.param("descZhCn", "光盘03")
				.param("descZhTw", "光盤03")
				.param("descEnUs", "CD03")
				).andExpect(status().isOk())
				.andDo(print());
	}

	//@Test
	public void testGetDataDic() throws Exception {
		mockMvc.perform((get("/sys/dd/get/123"))).andExpect(status().isOk())
				.andDo(print());
	}

	//@Test
	public void testDelDataDic() throws Exception {
		mockMvc.perform((get("/sys/dd/del/123"))).andExpect(status().isOk())
				.andDo(print());
	}

}
