<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"  
	xmlns:mvc="http://www.springframework.org/schema/mvc"  
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:ehcache="http://www.springframework.org/schema/ehcache"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
    http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
    http://www.springframework.org/schema/ehcache  http://www.springframework.org/schema/cache/springmodules-ehcache.xsd
    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd">

    <!-- 自动扫描包，可以写多个 -->
    <!-- 使用 annotation 自动注册bean,并检查@Controller, @Service, @Repository注解已被注入 -->
    <context:component-scan base-package="com.mw.main,com.mw.framework"/>
    
    <!-- 指定自己定义的validator 
    <mvc:annotation-driven validator="validator"/>
     -->
    <!-- 支持xml/json -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
    	
    </bean>
    
    <!-- 加载资源文件 -->
    <context:property-placeholder location="classpath:config.properties"/>  
    
    <!-- 原始加载资源文件方式
    <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
		    <value>classpath:config.properties</value>
		</property>
	</bean>
	 -->
	 
	 <!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
    <cache:annotation-driven cache-manager="cacheManager" />
     <!-- cacheManager工厂类，指定ehcache.xml的位置 -->
    <bean id="cacheManagerFactory"
        class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:/ehcache.xml" ></property>
    </bean>
 
 
    <!-- 声明cacheManager -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="cacheManagerFactory"></property>
    </bean>
	
	<!-- spring自己的换管理器，这里定义了两个缓存位置名称 ，既注解中的value 
<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">    
    <property name="caches">    
       <set>    
          <bean class="org.springframework.cache.concurrent.ConcurrentCacheFactoryBean">
          	<property name="name" value="default"/>
          </bean>
          <bean class="org.springframework.cache.concurrent.ConcurrentCacheFactoryBean">
          	<property name="name" value="andCache"></property>
          </bean>    
       </set>      
	</property>    
</bean>-->    
	 
    <!-- aspectj -->
    <aop:aspectj-autoproxy/>
    
    <!-- 多视图处理器 -->
    <bean class="com.mw.framework.resolver.MixedViewResolver">
		<property name="resolvers">
			<map>
				<entry key="jsp">
					<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
						<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
						<property name="prefix" value="/WEB-INF/jsp/"/>
						<property name="suffix" value=".jsp"></property>
					</bean>
				</entry>
				<entry key="ftl">
					<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
						<property name="cache" value="true"/>
						<property name="contentType" value="text/html;charset=UTF-8"></property>
						<!-- 宏命令的支持  -->  
						<property name="exposeSpringMacroHelpers" value="true"/>
						<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
						<property name="requestContextAttribute" value="rc"></property>
					</bean>
				</entry>
			</map>
		</property>
	</bean>
	
	<!-- freemarker config -->
    <bean id="freeMarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> 
        <property name="templateLoaderPath" value="/WEB-INF/ftl/" /> 
        <property name="freemarkerSettings"> 
            <props> 
                <prop key="template_update_delay">5</prop> 
                <prop key="default_encoding">UTF-8</prop> 
                <prop key="locale">zh_CN</prop> 
            </props> 
        </property> 
    </bean> 
    
    
   	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
                <value>classpath:messages</value>
                <value>classpath:org/hibernate/validator/ValidationMessages</value>
            </list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>
    
    <!-- 本地化信息解析器 -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="cookieName" value="locale"/>
        <property name="cookieMaxAge" value="-1"/>
        <property name="defaultLocale" value="zh_CN"/>
    </bean>
	
	<!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    
    <!-- 日志拦截器-->
    <bean id="logNDCInteceptor" class="com.mw.framework.interceptor.LogNDCInterceptor"/>
    
    <!-- 权限拦截器-->
    <bean id="permissionsInteceptor" class="com.mw.framework.interceptor.PermissionsInterceptor"></bean>
    
    <!-- RequestHelper拦截器-->
    <bean id="requestHelperInterceptor" class="com.mw.framework.interceptor.RequestHelperInterceptor"></bean>
    
    <!-- 用户信息拦截器-->
    <bean id="userInfoInterceptor" class="com.mw.framework.interceptor.UserInfoInterceptor"></bean>
    
    <!-- 本地化拦截器 -->
    <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
    	<property name="paramName" value="language"/>
    </bean>
    
    <mvc:annotation-driven validator="validator"/>
   	<mvc:interceptors>
    	<ref bean="requestHelperInterceptor"/>   <!-- RequestHelper拦截器--> 
   		<ref bean="userInfoInterceptor"/>  <!-- 用户信息拦截器--> 
    	<ref bean="permissionsInteceptor"/>   <!-- 权限拦截器-->
    	<ref bean="localeChangeInterceptor"/><!-- 本地化拦截器 -->
    	<ref bean="logNDCInteceptor"/>   <!-- 日志拦截器 -->
   	</mvc:interceptors>
	
	
	<!-- 总错误处理-->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		
		<property name="exceptionMappings"> 
			<props> 
			<!-- 上传文件大于最大尺寸后转向出错页面 --> 
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException"> 
					redirect:/uploadError.jsp
				</prop> 
			</props> 
		</property> 
		<property name="defaultErrorView">  
		 	<value>forward:/error.jsp</value>
		</property>
		<property name="defaultStatusCode">  
		 	<value>200</value>
		</property>		 	
		<property name="warnLogCategory">  
		 	<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>
		</property>		 	
		
	</bean> 
	
	<!-- 允许对静态资源文件的访问 --> 
	<mvc:default-servlet-handler/>

	<!-- 数据源 ,DBCP连接池
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost/meweb?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8"/>
		<property name="username" value="root"/>
		<property name="password" value="admin"/>
		<property name="initialSize" value="2"/>
		<property name="maxActive" value="10"/>
		<property name="maxIdle" value="10"/>
		<property name="maxWait" value="1000"/>
		<property name="poolPreparedStatements" value="true"/>
	</bean>
	 -->
	 
	<!-- 通常来说，只需要修改initialSize、minIdle、maxActive。如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
	<bean id="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
      <!-- 基本属性 url、user、password -->
      <property name="url" value="${${db}.hibernate.connection.url}" />
      <property name="username" value="${${db}.hibernate.connection.username}" />
      <property name="password" value="${${db}.hibernate.connection.password}" />

      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="1" />
      <property name="minIdle" value="1" /> 
      <property name="maxActive" value="20" />

      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="60000" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />

      <property name="validationQuery" value="SELECT 'x'" />
      <property name="testWhileIdle" value="true" />
      <property name="testOnBorrow" value="false" />
      <property name="testOnReturn" value="false" />

      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="false" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

      <!-- 配置监控统计拦截的filters -->
      <property name="filters" value="stat" /> 
  </bean>
  
  <bean id="defaultDataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
      <!-- 基本属性 url、user、password -->
      <property name="url" value="${${db}2.hibernate.connection.url}" />
      <property name="username" value="${${db}2.hibernate.connection.username}" />
      <property name="password" value="${${db}2.hibernate.connection.password}" />

      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="1" />
      <property name="minIdle" value="1" /> 
      <property name="maxActive" value="20" />

      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="60000" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />

      <property name="validationQuery" value="SELECT 'x'" />
      <property name="testWhileIdle" value="true" />
      <property name="testOnBorrow" value="false" />
      <property name="testOnReturn" value="false" />

      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="false" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

      <!-- 配置监控统计拦截的filters -->
      <property name="filters" value="stat" /> 
  </bean>
	
	<!-- JNDI数据源
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>jdbc/xxx</value>
		</property>
	</bean>
	-->
	
	<!-- 动态数据源 -->
	<bean id="dataSource" class="com.mw.framework.jdbc.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="DB01" value-ref="defaultDataSource"/>
				<entry key="DB02" value-ref="defaultDataSource2"/>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="defaultDataSource"/>
	</bean>
	
	<!-- JDBC模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 事务管理器 
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	-->
	
    <!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->  
    <bean class="com.mw.framework.context.SpringContextHolder" lazy-init="false" />  
	
	<!-- sessionFactory 
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource">
		</property>
		<property name="hibernateProperties">
			<props>
				org.hibernate.dialect.MySQLDialect
				org.hibernate.dialect.MySQLInnoDBDialect
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop></props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.cf.core.pojos</value>
			</list>
		</property>
	</bean>
	-->
	
	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">  
	    <property name="databasePlatform" value="${${db}.hibernate.dialect}" />  
	</bean>
	
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan">
			<list>
				<value>com.mw.framework.domain</value>
				<value>com.mw.main.domain</value>
			</list>
		</property>
		 <property name="jpaProperties">
		 	<props>
		 		<prop key="hibernate.hbm2ddl.auto">update</prop>
		 		<!-- 链接释放策略 on_close | after_transaction | after_statement | auto  -->
		 		<prop key="hibernate.connection.release_mode">after_transaction</prop>
				<prop key="hibernate.show_sql">true</prop>
				<!-- org.hibernate.dialect.MySQLDialect -->
				<!-- org.hibernate.dialect.MySQLInnoDBDialect -->
		 		<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<!-- hibernate 二级缓存 
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				-->
				
		 	</props>
		 </property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">  
	    <property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	
	<!-- 用注解来实现事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="false"/>
	
	<jpa:repositories base-package="com.mw.framework.dao,com.mw.main.dao" entity-manager-factory-ref="entityManagerFactory" transaction-manager-ref="transactionManager"  />
</beans>