<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"  
	xmlns:mvc="http://www.springframework.org/schema/mvc"  
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
    http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

    <!-- 自动扫描包，可以写多个 -->
    <!-- 使用 annotation 自动注册bean,并检查@Controller, @Service, @Repository注解已被注入 -->
    <context:component-scan base-package="com.mw.main.domain"/>
    
    <!-- 支持xml/json -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
    	
    </bean>
    
    <!-- aspectj -->
    <aop:aspectj-autoproxy/>
    
    <!-- 多视图处理器 -->
    <bean class="com.mw.core.resolver.MixedViewResolver">
		<property name="resolvers">
			<map>
				<entry key="jsp">
					<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
						<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
						<property name="prefix" value="/WEB-INF/jsp/"/>
						<property name="suffix" value=".jsp"></property>
					</bean>
				</entry>
				<entry key="ftl">
					<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
						<property name="cache" value="true"/>
						<property name="contentType" value="text/html;charset=UTF-8"></property>
						<!-- 宏命令的支持  -->  
						<property name="exposeSpringMacroHelpers" value="true"/>
						<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
						<property name="requestContextAttribute" value="rc"></property>
					</bean>
				</entry>
			</map>
		</property>
	</bean>
	
	<!-- freemarker config -->
    <bean id="freeMarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> 
        <property name="templateLoaderPath" value="/WEB-INF/ftl/" /> 
        <property name="freemarkerSettings"> 
            <props> 
                <prop key="template_update_delay">5</prop> 
                <prop key="default_encoding">UTF-8</prop> 
                <prop key="locale">zh_CN</prop> 
            </props> 
        </property> 
    </bean> 
    
    <!-- 日志拦截器-->
    <bean id="logNDCInteceptor" class="com.mw.core.interceptor.LogNDCInterceptor"/>
    
    <!-- 权限拦截器-->
    <bean id="permissionsInteceptor" class="com.mw.core.interceptor.PermissionsInterceptor"></bean>
    
    <!-- RequestHelper拦截器-->
    <bean id="requestHelperInterceptor" class="com.mw.core.interceptor.RequestHelperInterceptor"></bean>
    
    <!-- 用户信息拦截器-->
    <bean id="userInfoInterceptor" class="com.mw.core.interceptor.UserInfoInterceptor"></bean>
    
    <!-- 注解请求映射  -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">        
		<property name="interceptors">
		    <list>  
		    	<ref bean="userInfoInterceptor"/>  <!-- 用户信息拦截器--> 
		    	<ref bean="permissionsInteceptor"/>   <!-- 权限拦截器-->
		    	<ref bean="requestHelperInterceptor"/>   <!-- RequestHelper拦截器--> 
		    	<ref bean="logNDCInteceptor"/>   <!-- 日志拦截器 -->
		    </list>        
		</property>        
	</bean>  	
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">  
			<list>  
				<ref bean="byteArray_hmc" />  
				<ref bean="string_hmc" />  
				<ref bean="resource_hmc" />  
				<ref bean="source_hmc" />  
				<ref bean="xmlAwareForm_hmc" />  
				<ref bean="jaxb2RootElement_hmc" />  
				<ref bean="jackson_hmc" />  
			</list>  
		</property>  
	</bean>  
	<bean id="byteArray_hmc" class="org.springframework.http.converter.ByteArrayHttpMessageConverter" /><!-- 处理.. -->
	<bean id="string_hmc" class="org.springframework.http.converter.StringHttpMessageConverter" /><!-- 处理.. -->
	<bean id="resource_hmc" class="org.springframework.http.converter.ResourceHttpMessageConverter" /><!-- 处理.. -->
	<bean id="source_hmc" class="org.springframework.http.converter.xml.SourceHttpMessageConverter" /><!-- 处理.. -->
	<bean id="xmlAwareForm_hmc" class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter" /><!-- 处理.. -->
	<bean id="jaxb2RootElement_hmc" class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" /><!-- 处理.. -->
	<bean id="jackson_hmc" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" /><!-- 处理json-->
	
	
	<!-- 总错误处理-->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		
		<property name="exceptionMappings"> 
			<props> 
			<!-- 上传文件大于最大尺寸后转向出错页面 --> 
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException"> 
					redirect:/uploadError.jsp
				</prop> 
			</props> 
		</property> 
		<property name="defaultErrorView">  
		 	<value>forward:/error.jsp</value>
		</property>
		<property name="defaultStatusCode">  
		 	<value>200</value>
		</property>		 	
		<property name="warnLogCategory">  
		 	<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>
		</property>		 	
		
	</bean> 
	
	<!-- 允许对静态资源文件的访问 --> 
	<mvc:default-servlet-handler/>

	<!-- 数据源 ,DBCP连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:orcl"/>
		<property name="username" value="cf"/>
		<property name="password" value="a"/>
		<property name="initialSize" value="2"/>
		<property name="maxActive" value="10"/>
		<property name="maxIdle" value="10"/>
		<property name="maxWait" value="1000"/>
		<property name="poolPreparedStatements" value="true"/>
	</bean>
	
	<!-- JNDI数据源
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>jdbc/xxx</value>
		</property>
	</bean>
	-->
	
	<!-- JDBC模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 事务管理器 
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	-->
	
    <!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->  
    <bean class="com.mw.core.context.SpringContextHolder" lazy-init="false" />  
	
	<!-- sessionFactory 
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource">
		</property>
		<property name="hibernateProperties">
			<props>
				org.hibernate.dialect.MySQLDialect
				org.hibernate.dialect.MySQLInnoDBDialect
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop></props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.cf.core.pojos</value>
			</list>
		</property>
	</bean>
	-->
	
	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">  
	    <property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect" />  
	</bean>
	
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan">
			<list>
				<value>com.mw.core.domain</value>
				<value>com.mw.main.domain</value>
			</list>
		</property>
		 <property name="jpaProperties">
		 	<props>
		 		<!-- 链接释放策略 on_close | after_transaction | after_statement | auto  -->
		 		<prop key="hibernate.connection.release_mode">after_transaction</prop>
				<prop key="hibernate.show_sql">true</prop>
		 		<prop key="hibernate.dialect">org.hibernate.dialect.MySQLInnoDBDialect</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<!--prop key="hibernate.hbm2ddl.auto">update</prop-->
		 	</props>
		 </property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">  
	    <property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	
	<!-- 用注解来实现事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<jpa:repositories base-package="com.mw.core.dao" entity-manager-factory-ref="entityManagerFactory" transaction-manager-ref="transactionManager"  />
	<jpa:repositories base-package="com.mw.main.dao" entity-manager-factory-ref="entityManagerFactory" transaction-manager-ref="transactionManager"  />
</beans>