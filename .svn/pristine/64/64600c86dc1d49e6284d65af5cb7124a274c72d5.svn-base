package com.mw.framework.core;

import java.io.Serializable;
import java.sql.Connection;
import java.util.Map;
import java.util.Set;

import javax.naming.NamingException;
import javax.naming.Reference;

import org.hibernate.Cache;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionBuilder;
import org.hibernate.SessionFactory;
import org.hibernate.StatelessSession;
import org.hibernate.StatelessSessionBuilder;
import org.hibernate.TypeHelper;
import org.hibernate.engine.spi.FilterDefinition;
import org.hibernate.metadata.ClassMetadata;
import org.hibernate.metadata.CollectionMetadata;
import org.hibernate.stat.Statistics;

import com.mw.framework.support.DynamicDataSourceHolder;

/**
 * DEP-001:因只能支持已配置的EntityManagerFactory动态切换，不能支持动态拓展数据库，故暂停使用
 * @Project MeWeb
 * @Copyright © 2008-2014 SPRO Technology Consulting Limited. All rights
 *            reserved.
 * @fileName com.mw.framework.core.DynamicSessionFactoryImpl.java
 * @Version 1.0.0
 * @author Allan Ai
 * @time 2014-2-19
 * 
 */
@SuppressWarnings({ "deprecation", "rawtypes" })
public class DynamicSessionFactoryImpl implements DynamicSessionFactory {
	private static final long serialVersionUID = 7881472910692818347L;

	private Map<Object, SessionFactory> targetSessionFactorys;

	private SessionFactory defaultTargetSessionFactory;

	@Override
	public SessionFactory getHibernateSessionFactory() {
		SessionFactory targetSessionFactory = targetSessionFactorys
				.get(DynamicDataSourceHolder.getCustomerType());
		if (targetSessionFactory != null) {
			return targetSessionFactory;
		} else if (defaultTargetSessionFactory != null) {
			return defaultTargetSessionFactory;
		}
		return null;
	}

	@Override
	public void close() throws HibernateException {
		this.getHibernateSessionFactory().close();
	}

	@Override
	public boolean containsFetchProfileDefinition(String s) {
		return this.getHibernateSessionFactory()
				.containsFetchProfileDefinition(s);
	}

	@Override
	@Deprecated
	public void evict(Class clazz) throws HibernateException {
		this.getHibernateSessionFactory().evict(clazz);
	}

	@Override
	@Deprecated
	public void evict(Class clazz, Serializable serializable)
			throws HibernateException {
		this.getHibernateSessionFactory().evict(clazz, serializable);
	}

	@Override
	@Deprecated
	public void evictCollection(String s) throws HibernateException {
		this.getHibernateSessionFactory().evictCollection(s);
	}

	@Override
	@Deprecated
	public void evictCollection(String s, Serializable serializable)
			throws HibernateException {
		this.getHibernateSessionFactory().evictCollection(s, serializable);
	}

	@Override
	@Deprecated
	public void evictEntity(String entity) throws HibernateException {
		this.getHibernateSessionFactory().evictEntity(entity);

	}

	@Override
	@Deprecated
	public void evictEntity(String entity, Serializable serializable)
			throws HibernateException {
		this.getHibernateSessionFactory().evictEntity(entity, serializable);
	}

	@Override
	public void evictQueries() throws HibernateException {
		this.getHibernateSessionFactory().evictQueries();
	}

	@Override
	@Deprecated
	public void evictQueries(String queries) throws HibernateException {
		this.getHibernateSessionFactory().evictQueries(queries);
	}

	@Override
	public Map<String, ClassMetadata> getAllClassMetadata() {
		return this.getHibernateSessionFactory().getAllClassMetadata();
	}

	@Override
	public Map getAllCollectionMetadata() {
		return this.getHibernateSessionFactory().getAllClassMetadata();
	}

	@Override
	public Cache getCache() {
		return this.getHibernateSessionFactory().getCache();
	}

	@Override
	public ClassMetadata getClassMetadata(Class clazz) {
		return this.getHibernateSessionFactory().getClassMetadata(clazz);
	}

	@Override
	public ClassMetadata getClassMetadata(String classMetadata) {
		return this.getHibernateSessionFactory()
				.getClassMetadata(classMetadata);
	}

	@Override
	public CollectionMetadata getCollectionMetadata(String collectionMetadata) {
		return this.getHibernateSessionFactory().getCollectionMetadata(
				collectionMetadata);
	}

	@Override
	public Session getCurrentSession() throws HibernateException {
		return this.getHibernateSessionFactory().getCurrentSession();
	}

	@Override
	public Set getDefinedFilterNames() {
		return this.getHibernateSessionFactory().getDefinedFilterNames();
	}

	@Override
	public FilterDefinition getFilterDefinition(String definition)
			throws HibernateException {
		return this.getHibernateSessionFactory()
				.getFilterDefinition(definition);
	}

	@Override
	public SessionFactoryOptions getSessionFactoryOptions() {
		return this.getHibernateSessionFactory().getSessionFactoryOptions();
	}

	@Override
	public Statistics getStatistics() {
		return this.getHibernateSessionFactory().getStatistics();
	}

	@Override
	public TypeHelper getTypeHelper() {
		return this.getHibernateSessionFactory().getTypeHelper();
	}

	@Override
	public boolean isClosed() {
		return this.getHibernateSessionFactory().isClosed();
	}

	@Override
	public Session openSession() throws HibernateException {
		return this.getHibernateSessionFactory().openSession();
	}

	@Override
	public StatelessSession openStatelessSession() {
		return this.getHibernateSessionFactory().openStatelessSession();
	}

	@Override
	public StatelessSession openStatelessSession(Connection connection) {
		return this.getHibernateSessionFactory().openStatelessSession(
				connection);
	}

	@Override
	public SessionBuilder withOptions() {
		return this.getHibernateSessionFactory().withOptions();
	}

	@Override
	public StatelessSessionBuilder withStatelessOptions() {
		return this.getHibernateSessionFactory().withStatelessOptions();
	}

	@Override
	public Reference getReference() throws NamingException {
		return this.getHibernateSessionFactory().getReference();
	}

	public void setTargetSessionFactorys(
			Map<Object, SessionFactory> targetSessionFactorys) {
		this.targetSessionFactorys = targetSessionFactorys;
	}

	public void setDefaultTargetSessionFactory(
			SessionFactory defaultTargetSessionFactory) {
		this.defaultTargetSessionFactory = defaultTargetSessionFactory;
	}
}
